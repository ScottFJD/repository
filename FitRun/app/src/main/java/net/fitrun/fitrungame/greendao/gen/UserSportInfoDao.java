package net.fitrun.fitrungame.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import net.fitrun.fitrungame.sportSelect.speedy.bean.UserSportInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_SPORT_INFO".
*/
public class UserSportInfoDao extends AbstractDao<UserSportInfo, Long> {

    public static final String TABLENAME = "USER_SPORT_INFO";

    /**
     * Properties of entity UserSportInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Speed = new Property(1, double.class, "speed", false, "SPEED");
        public final static Property Heart = new Property(2, int.class, "heart", false, "HEART");
        public final static Property Pace = new Property(3, int.class, "pace", false, "PACE");
    };


    public UserSportInfoDao(DaoConfig config) {
        super(config);
    }
    
    public UserSportInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_SPORT_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"SPEED\" REAL NOT NULL ," + // 1: speed
                "\"HEART\" INTEGER NOT NULL ," + // 2: heart
                "\"PACE\" INTEGER NOT NULL );"); // 3: pace
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_SPORT_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserSportInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindDouble(2, entity.getSpeed());
        stmt.bindLong(3, entity.getHeart());
        stmt.bindLong(4, entity.getPace());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserSportInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindDouble(2, entity.getSpeed());
        stmt.bindLong(3, entity.getHeart());
        stmt.bindLong(4, entity.getPace());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserSportInfo readEntity(Cursor cursor, int offset) {
        UserSportInfo entity = new UserSportInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getDouble(offset + 1), // speed
            cursor.getInt(offset + 2), // heart
            cursor.getInt(offset + 3) // pace
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserSportInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSpeed(cursor.getDouble(offset + 1));
        entity.setHeart(cursor.getInt(offset + 2));
        entity.setPace(cursor.getInt(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserSportInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserSportInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
